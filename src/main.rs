// System
use std::env;

// Third Party
use tonic::transport::Server;

// Local
mod node_setup;
mod peer;
mod sample_grpc;
mod types;
mod utils;
#[allow(clippy::pedantic)]
#[rustfmt::skip]
pub mod sample { // This code is generated by prost
    tonic::include_proto!("sample");

    pub(crate) const FILE_DESCRIPTOR_SET: &[u8] =
        tonic::include_file_descriptor_set!("sample_descriptor");
}
use sample::sample_server::SampleServer;
use sample_grpc::MySample;

#[tokio::main]
// Start a node's gRPC server
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    let node_count: u32 = args[1].parse().unwrap();
    let hostname: String = args[2].parse().unwrap();
    let addr = "[::0]:2323".parse().unwrap();

    let sample = MySample::new(node_count, hostname);
    // The reflection service is for grpcurl command line compatibility for testing
    let reflection_service = tonic_reflection::server::Builder::configure()
        .register_encoded_file_descriptor_set(sample::FILE_DESCRIPTOR_SET)
        .build()
        .unwrap();
    utils::debug_line_to_file("Running.", "servers_running.debug.txt");
    Server::builder()
        .add_service(reflection_service)
        .add_service(SampleServer::new(sample))
        .serve(addr)
        .await?;
    Ok(())
}
